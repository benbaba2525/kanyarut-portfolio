{"ast":null,"code":"'use strict';\n\nvar GetIntrinsic = require('../GetIntrinsic');\n\nvar $iterator = GetIntrinsic('%Symbol.iterator%', true);\n\nvar callBound = require('../helpers/callBound');\n\nvar $arrayJoin = callBound('Array.prototype.join');\nvar $arrayPush = callBound('Array.prototype.push');\nvar $stringSlice = callBound('String.prototype.slice');\nvar $stringSplit = callBound('String.prototype.split');\n\nvar AdvanceStringIndex = require('./AdvanceStringIndex');\n\nvar GetIterator = require('./GetIterator');\n\nvar GetMethod = require('./GetMethod');\n\nvar IsArray = require('./IsArray');\n\nvar IteratorStep = require('./IteratorStep');\n\nvar IteratorValue = require('./IteratorValue');\n\nvar ToObject = require('./ToObject');\n\nvar Type = require('./Type'); // https://www.ecma-international.org/ecma-262/7.0/#sec-iterabletoarraylike\n\n\nmodule.exports = function IterableToArrayLike(items) {\n  var usingIterator;\n\n  if ($iterator) {\n    usingIterator = GetMethod(items, $iterator);\n  } else if (IsArray(items)) {\n    usingIterator = function usingIterator() {\n      var i = -1;\n      var arr = this; // eslint-disable-line no-invalid-this\n\n      return {\n        next: function next() {\n          i += 1;\n          return {\n            done: i >= arr.length,\n            value: arr[i]\n          };\n        }\n      };\n    };\n  } else if (Type(items) === 'String') {\n    usingIterator = function usingIterator() {\n      var i = 0;\n      return {\n        next: function next() {\n          var nextIndex = AdvanceStringIndex(items, i, true);\n          var value = $arrayJoin($stringSplit($stringSlice(items, i, nextIndex), ''), '');\n          i = nextIndex;\n          return {\n            done: nextIndex > items.length,\n            value: value\n          };\n        }\n      };\n    };\n  }\n\n  if (typeof usingIterator !== 'undefined') {\n    var iterator = GetIterator(items, usingIterator);\n    var values = [];\n    var next = true;\n\n    while (next) {\n      next = IteratorStep(iterator);\n\n      if (next) {\n        var nextValue = IteratorValue(next);\n        $arrayPush(values, nextValue);\n      }\n    }\n\n    return values;\n  }\n\n  return ToObject(items);\n};","map":{"version":3,"sources":["/Users/ben/Desktop/New Porfolio/kanyarut-portfolio/node_modules/es-abstract/2016/IterableToArrayLike.js"],"names":["GetIntrinsic","require","$iterator","callBound","$arrayJoin","$arrayPush","$stringSlice","$stringSplit","AdvanceStringIndex","GetIterator","GetMethod","IsArray","IteratorStep","IteratorValue","ToObject","Type","module","exports","IterableToArrayLike","items","usingIterator","i","arr","next","done","length","value","nextIndex","iterator","values","nextValue"],"mappings":"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","sourcesContent":["'use strict';\n\nvar GetIntrinsic = require('../GetIntrinsic');\n\nvar $iterator = GetIntrinsic('%Symbol.iterator%', true);\n\nvar callBound = require('../helpers/callBound');\n\nvar $arrayJoin = callBound('Array.prototype.join');\nvar $arrayPush = callBound('Array.prototype.push');\nvar $stringSlice = callBound('String.prototype.slice');\nvar $stringSplit = callBound('String.prototype.split');\n\nvar AdvanceStringIndex = require('./AdvanceStringIndex');\nvar GetIterator = require('./GetIterator');\nvar GetMethod = require('./GetMethod');\nvar IsArray = require('./IsArray');\nvar IteratorStep = require('./IteratorStep');\nvar IteratorValue = require('./IteratorValue');\nvar ToObject = require('./ToObject');\nvar Type = require('./Type');\n\n// https://www.ecma-international.org/ecma-262/7.0/#sec-iterabletoarraylike\n\nmodule.exports = function IterableToArrayLike(items) {\n\tvar usingIterator;\n\tif ($iterator) {\n\t\tusingIterator = GetMethod(items, $iterator);\n\t} else if (IsArray(items)) {\n\t\tusingIterator = function () {\n\t\t\tvar i = -1;\n\t\t\tvar arr = this; // eslint-disable-line no-invalid-this\n\t\t\treturn {\n\t\t\t\tnext: function () {\n\t\t\t\t\ti += 1;\n\t\t\t\t\treturn {\n\t\t\t\t\t\tdone: i >= arr.length,\n\t\t\t\t\t\tvalue: arr[i]\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t};\n\t\t};\n\t} else if (Type(items) === 'String') {\n\t\tusingIterator = function () {\n\t\t\tvar i = 0;\n\t\t\treturn {\n\t\t\t\tnext: function () {\n\t\t\t\t\tvar nextIndex = AdvanceStringIndex(items, i, true);\n\t\t\t\t\tvar value = $arrayJoin($stringSplit($stringSlice(items, i, nextIndex), ''), '');\n\t\t\t\t\ti = nextIndex;\n\t\t\t\t\treturn {\n\t\t\t\t\t\tdone: nextIndex > items.length,\n\t\t\t\t\t\tvalue: value\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t};\n\t\t};\n\t}\n\tif (typeof usingIterator !== 'undefined') {\n\t\tvar iterator = GetIterator(items, usingIterator);\n\t\tvar values = [];\n\t\tvar next = true;\n\t\twhile (next) {\n\t\t\tnext = IteratorStep(iterator);\n\t\t\tif (next) {\n\t\t\t\tvar nextValue = IteratorValue(next);\n\t\t\t\t$arrayPush(values, nextValue);\n\t\t\t}\n\t\t}\n\t\treturn values;\n\t}\n\n\treturn ToObject(items);\n};\n"]},"metadata":{},"sourceType":"script"}